# ==========================================
#     .functions
#
#  - print_{info|err|debug} = formatted print
#  - mkd                      = mkdir + cd
#  - mke                      = mkdir only if not exists
#  - vpn                      = connect to Cisco AnyConnect or OpenConnect VPN
#  - targz                    = -> .tar.gz
#  - fs                       = du [with options]
#  - duti                     = set file association
# ==========================================

# Print formatted info
function print_info() {
  echo -e $fg_bold[blue]"$@"$reset_color
}

# Print formatted error
function print_err() {
  echo -e $fg_bold[red]"[Error] $@"$reset_color
}

# Print formatted debug
function print_debug() {
  echo -e $fg_bold[yellow]"[Debug]:\n$@"$reset_color
}

# Docker images start/stop
# Usage start_docker_image $name $volume_dir $image $port[]
# function start_docker_image() {
#   name=$1
#   volume_dir=$2
#   image=$3
#   args=("$@")
#   args_num=${#args[@]}
#   if [ "$(docker ps -q -f name=$name)" ]; then
#     docker rm -f $name
#   else
#     docker run -d for ((i=2;i<$args_num;i++)); do echo -p ${args[${i}]} done -v $HOME/.docker/$name:$volume_dir --name $name $image
#   fi
# }

# Create directory only if not exists
function mke() {
  if [[ ! -e "$@" ]]; then
    print_info "Creating directory $@..."
    mkdir -p "$@"
  fi
}

# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$_";
}

# Manage connection to Cisco AnyConnect VPN
function vpn() {
  zparseopts -D -E -F - kc::=keychain -keychain::=keychain s=secure -secure=secure h=help -help=help

  local totp="$1"
  local secure=${#secure}
  local keychain=${${keychain#(--keychain|-kc)}:-"CiscoVPN"}

  local usage=$(cat <<EOF
${fg_bold[blue]}Usage:${reset_color} vpn [options…] <TOTP> ${fg[cyan]}Manage connection to Cisco AnyConnect based VPN${reset_color}

${fg_bold[blue]}Options:${reset_color}
  ${fg_bold[yellow]}--secure${reset_color}           ${fg[blue]}Connect to VPN using native Cisco AnyConnect client${reset_color} ${fg[cyan]}(without flag OpenConnect client will be used)${reset_color}
  ${fg_bold[yellow]}--keychain${reset_color} <entry> ${fg[blue]}Name of KeyChain entry to use for connection${reset_color} ${fg[cyan]}(CiscoVPN entry will be used if not set)${reset_color}
  ${fg_bold[yellow]}--help${reset_color}             ${fg[blue]}Show help (this message) and exit${reset_color}

${fg_bold[blue]}Setup:${reset_color}
  ${fg[blue]}Add your VPN connection credentials to secure macOS KeyChain by executing this${reset_color} ${fg[cyan]}(required step in order for this program to work):${reset_color}
      security add-generic-password ${fg_bold[yellow]}-l${reset_color} CiscoVPN ${fg_bold[yellow]}-s${reset_color} %HOST% ${fg_bold[yellow]}-a${reset_color} %GROUP%/%USER% ${fg_bold[yellow]}-w${reset_color} %PASSWORD%
  ${fg[blue]}Install manually if you want to use native client:${reset_color}
      cisco-any-connect.pkg
  ${fg[blue]}...or execute this if you prefer openconnect$reset_color ${fg[cyan]}(depends on gmp bdw-gc libffi libtool libunistring pkg-config guile libidn2 libtasn1 nettle p11-kit libevent unbound gnutls stoken):${reset_color}
      brew install openconnect

${fg_bold[blue]}Examples:${reset_color}
  vpn ${fg_bold[yellow]}--keychain${reset_color} SuperVPN ${fg_bold[yellow]}--secure${reset_color} 133742   ${fg[blue]}Connect via native client using 'SuperVPN' KeyChain entry${reset_color}
  vpn 800855                                ${fg[blue]}Connect via openconnect using default KeyChain entry 'CiscoVPN'${reset_color}
  vpn                                       ${fg[blue]}Disconnect and gracefully close all Cisco VPN daemons and workers${reset_color}
EOF
)

  if [ ${#help} = 1 ]; then
    echo $usage
  else
    local iseAgent="/Library/LaunchAgents/com.cisco.anyconnect.aciseposture.plist"
    local vpnAgent="/Library/LaunchDaemons/com.cisco.anyconnect.vpnagentd.plist"
    local stopped=$(([ -z `pgrep vpnagentd` ] && [ -z `pgrep aciseposture` ] && [ -z `pgrep openconnect` ]) && echo 1 || echo 0)
    local type=$([ $secure = 0 ] && echo "OpenConnect" || echo "Cisco AnyConnect")

    # print_debug "    '$keychain' '$secure' '$type' '$stopped'\n    '$totp'"

    function start() {
      local raw=$(security 2>&1 find-generic-password -gl $keychain | tr '\n' ' ')
      local host=$(echo $raw | sed -nE 's:.*"svce"<blob>="([^"]*)".*:\1:p')
      local acc=$(echo $raw | sed -nE 's:.*"acct"<blob>="([^"]*)".*:\1:p')
      local group=$(echo $acc | cut -d'/' -f1)
      local user=$(echo $acc | cut -d'/' -f2)
      local pass=$(echo $raw | sed -nE 's:.*password\: "([^"]*)".*:\1:p')

      # print_debug "    '$acc' '$group' '$user' '$host'\n    '$pass'"

      if [ $secure = 0 ]; then
        echo "$pass\n$totp" | sudo openconnect --background --authgroup=$group --user=$user --passwd-on-stdin $host
      else
        group="0" # Always "0" for Cisco native client

        sudo launchctl load $vpnAgent
        echo "connect $host\n$group\n$user\n$pass\n$totp\n" | /opt/cisco/anyconnect/bin/vpn -s
        sudo launchctl load $iseAgent
      fi
    }

    function stop() {
      sudo pkill "openconnect"
      sudo launchctl unload $vpnAgent $iseAgent > /dev/null 2>&1
    }

    if [ $stopped = 1 ] && [ "$totp" = "" ]; then
      print_err "TOTP is empty!"
    elif [ $stopped = 1 ] && [ -n "$totp" ]; then
      print_info "Launching $type VPN..."
      start
    elif [ $stopped = 0 ] && [ "$totp" = "" ]; then
      print_info "Closing VPN..."
      stop
    elif [ $stopped = 0 ] && [ -n "$totp" ]; then
      print_info "Restarting $type VPN..."
      stop
      start
    fi
  fi
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
  local tmpFile="${@%/}.tar"
  tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

  size=$(
    stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
    stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
  )

  local cmd="";
  if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
    # the .tar file is smaller than 50 MB and Zopfli is available; use it
    cmd="zopfli"
  else
    if hash pigz 2> /dev/null; then
      cmd="pigz"
    else
      cmd="gzip"
    fi
  fi

  print_info "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…"

  "${cmd}" -v "${tmpFile}" || return 1;
  [ -f "${tmpFile}" ] && rm "${tmpFile}";

  zippedSize=$(
    stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
    stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
  )

  print_info "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully"
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local cmd=-sbh;
  else
    local cmd=-sh;
  fi
  if [[ -n "$@" ]]; then
    du $cmd -- "$@";
  else
    du $cmd .[^.]* ./*;
  fi
}

# Set default applications for various document types on macOS,
# using Apple's Uniform Type Identifiers (UTI) and/or file extensions.
# Implemented via defaults + Launch Services LSHandlers
function duti() {
  zparseopts -D -E -F - -uti+:=uti -ext+:=ext r=rebuild -rebuild=rebuild h=help -help=help

  local usage=$(cat <<EOF
${fg_bold[blue]}Usage:${reset_color} duti [options…] <handler> ${fg[cyan]}Assign given handler to always open provided UTIs or extensions${reset_color}

${fg_bold[blue]}Options:${reset_color}
  ${fg_bold[yellow]}--uti${reset_color} <uti>  ${fg[blue]}Provide Uniform Type Identifier(s) for association with handler${reset_color}
  ${fg_bold[yellow]}--ext${reset_color} <ext>  ${fg[blue]}Provide extension(s) for association with handler${reset_color}
  ${fg_bold[yellow]}--rebuild${reset_color}    ${fg[blue]}Force rebuild of Launch Services database after successfull handler assign${reset_color}
  ${fg_bold[yellow]}--help${reset_color}       ${fg[blue]}Show help (this message) and exit${reset_color}

${fg_bold[blue]}Examples:${reset_color}
  duti ${fg_bold[yellow]}--uti${reset_color} "com.rarlab.rar-archive" ${fg_bold[yellow]}--uti${reset_color} "org.7-zip.7-zip-archive" ${fg_bold[yellow]}--ext${reset_color} "zip" ${fg_bold[yellow]}--ext${reset_color} "bzip" ${fg_bold[yellow]}--rebuild${reset_color} com.aone.keka
EOF
)

  if [ ${#help} = 1 ]; then
    echo $usage
  elif [[ ${#uti[@]} -eq 0 ]] && [[ ${#ext[@]} -eq 0 ]]; then
    print_err "Arguments --uti and/or --ext must be set"
  elif [[ $# -ne 1 ]]; then
    print_err "Single handler name expected, got $#"
  else
    local args=()
    for _ u ("${(@)uti}") args+=("'{LSHandlerContentType=$u;LSHandlerRoleAll=$1;}'")
    for _ e ("${(@)ext}") args+=("'{LSHandlerContentTag=$e;LSHandlerContentTagClass=public.filename-extension;LSHandlerRoleAll=$1;}'")

    # print_debug "    ${#rebuild}\n    $@\n    ${#args[@]}: $args"

    eval 'defaults write com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers -array-add' ${(j: :)args}
    if [ ${#rebuild} = 1 ]; then
      /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -kill -r -v -apps u
    fi
  fi

  unset uti ext rebuild help
}
